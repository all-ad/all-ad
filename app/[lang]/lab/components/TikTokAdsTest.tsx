"use client";

import { useState, useEffect } from "react";
import { Card, CardBody } from "@heroui/card";
import { Button } from "@heroui/button";
import { Input } from "@heroui/input";
import { Divider } from "@heroui/divider";
import { Code } from "@heroui/code";
import { Badge } from "@heroui/badge";
import { Accordion, AccordionItem } from "@heroui/accordion";
import { Chip } from "@heroui/chip";

import PlatformTestCard from "./PlatformTestCard";

import log from "@/utils/logger";

interface TikTokCredentials {
  appId: string;
  appSecret: string;
  accessToken: string;
  refreshToken?: string;
  advertiserId?: string;
}

interface TestItem {
  id: string;
  name: string;
  description: string;
  status: "pending" | "testing" | "success" | "error";
  error?: string;
}

export default function TikTokAdsTest() {
  const [credentials, setCredentials] = useState<TikTokCredentials>({
    appId: "",
    appSecret: "",
    accessToken: "",
    refreshToken: "",
    advertiserId: "",
  });

  const [authCode, setAuthCode] = useState("");
  const [apiResponse, setApiResponse] = useState<Record<
    string,
    unknown
  > | null>(null);
  const [error, setError] = useState<string | null>(null);

  const [testItems, setTestItems] = useState<TestItem[]>([
    {
      id: "auth",
      name: "Ïù∏Ï¶ù ÌÜ†ÌÅ∞ ÍµêÌôò",
      description: "Authorization CodeÎ•º Access TokenÏúºÎ°ú ÍµêÌôò",
      status: "pending",
    },
    {
      id: "advertiser",
      name: "Í¥ëÍ≥†Ï£º Ï†ïÎ≥¥",
      description: "Í¥ëÍ≥†Ï£º Í≥ÑÏ†ï Ï†ïÎ≥¥ Ï°∞Ìöå",
      status: "pending",
    },
    {
      id: "campaigns",
      name: "Ï∫†ÌéòÏù∏ Î™©Î°ù",
      description: "ÌôúÏÑ± Ï∫†ÌéòÏù∏ Î™©Î°ù Ï°∞Ìöå",
      status: "pending",
    },
    {
      id: "performance",
      name: "ÏÑ±Í≥º Îç∞Ïù¥ÌÑ∞",
      description: "Ï∫†ÌéòÏù∏ ÏÑ±Í≥º ÏßÄÌëú Ï°∞Ìöå",
      status: "pending",
    },
  ]);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get("code");
    const errorParam = urlParams.get("error");

    if (code) {
      setAuthCode(code);
      window.history.replaceState({}, document.title, window.location.pathname);
    }

    if (errorParam) {
      setError(`OAuth Ïò§Î•ò: ${errorParam}`);
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  }, []);

  const handleGenerateAuthUrl = () => {
    const params = new URLSearchParams({
      client_key: credentials.appId,
      scope: "ads.management,ads.operation,reporting",
      response_type: "code",
      redirect_uri: `${window.location.origin}/api/auth/callback/tiktok-ads`,
      state: Math.random().toString(36).substring(7),
    });

    const authUrl = `https://www.tiktok.com/v2/auth/authorize/?${params.toString()}`;

    window.open(authUrl, "_blank");
  };

  const runTest = async (testId: string) => {
    setTestItems((prev) =>
      prev.map((item) =>
        item.id === testId ? { ...item, status: "testing" } : item,
      ),
    );

    try {
      let result;

      switch (testId) {
        case "auth":
          result = await testTokenExchange();
          break;
        case "advertiser":
          result = await testAdvertiserInfo();
          break;
        case "campaigns":
          result = await testCampaigns();
          break;
        case "performance":
          result = await testPerformanceData();
          break;
      }

      setTestItems((prev) =>
        prev.map((item) =>
          item.id === testId
            ? { ...item, status: "success", error: undefined }
            : item,
        ),
      );

      if (result) {
        setApiResponse(result);
      }
    } catch (error) {
      setTestItems((prev) =>
        prev.map((item) =>
          item.id === testId
            ? {
                ...item,
                status: "error",
                error: error instanceof Error ? error.message : "ÌÖåÏä§Ìä∏ Ïã§Ìå®",
              }
            : item,
        ),
      );

      setError(error instanceof Error ? error.message : "Unknown error");
      log.error(`Test ${testId} failed`, error);
    }
  };

  const testTokenExchange = async () => {
    if (!authCode) {
      throw new Error("Authorization CodeÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§");
    }

    // Ïã§Ï†ú API Ìò∏Ï∂ú ÏãúÎÆ¨Î†àÏù¥ÏÖò
    const mockResponse = {
      code: 0,
      message: "OK",
      data: {
        access_token: "act.example123456789",
        advertiser_ids: ["7123456789012345"],
        scope: ["ads.management", "ads.operation", "reporting"],
        token_type: "Bearer",
        expires_in: 86400, // 24ÏãúÍ∞Ñ
      },
      request_id: "202501061234567890",
    };

    setCredentials((prev) => ({
      ...prev,
      accessToken: mockResponse.data.access_token,
      advertiserId: mockResponse.data.advertiser_ids[0],
    }));

    return mockResponse;
  };

  const testAdvertiserInfo = async () => {
    if (!credentials.advertiserId || !credentials.accessToken) {
      throw new Error("Advertiser IDÏôÄ Access TokenÏù¥ ÌïÑÏöîÌï©ÎãàÎã§");
    }

    const mockData = {
      code: 0,
      message: "OK",
      data: {
        list: [
          {
            advertiser_id: credentials.advertiserId,
            advertiser_name: "Test Business",
            currency: "USD",
            timezone: "America/Los_Angeles",
            brand: "Test Brand",
            brand_id: "987654321",
            balance: 1000.0,
            status: "STATUS_ENABLE",
            create_time: "2025-01-01 00:00:00",
          },
        ],
        page_info: {
          page: 1,
          page_size: 10,
          total_number: 1,
          total_page: 1,
        },
      },
      request_id: "202501061234567891",
    };

    return mockData;
  };

  const testCampaigns = async () => {
    if (!credentials.advertiserId || !credentials.accessToken) {
      throw new Error("Advertiser IDÏôÄ Access TokenÏù¥ ÌïÑÏöîÌï©ÎãàÎã§");
    }

    const mockData = {
      code: 0,
      message: "OK",
      data: {
        list: [
          {
            campaign_id: "1781234567890123456",
            campaign_name: "Summer Sale 2025",
            objective_type: "CONVERSIONS",
            budget: 500.0,
            budget_mode: "BUDGET_MODE_DAY",
            status: "CAMPAIGN_STATUS_ENABLE",
            operation_status: "ENABLE",
            create_time: "2025-01-05 10:00:00",
            modify_time: "2025-01-06 15:30:00",
            is_smart_performance_campaign: false,
          },
          {
            campaign_id: "1781234567890123457",
            campaign_name: "New Year Promo",
            objective_type: "TRAFFIC",
            budget: 250.0,
            budget_mode: "BUDGET_MODE_TOTAL",
            status: "CAMPAIGN_STATUS_DISABLE",
            operation_status: "DISABLE",
            create_time: "2025-01-01 08:00:00",
            modify_time: "2025-01-04 12:00:00",
            is_smart_performance_campaign: true,
          },
        ],
        page_info: {
          page: 1,
          page_size: 100,
          total_number: 2,
          total_page: 1,
        },
      },
      request_id: "202501061234567892",
    };

    return mockData;
  };

  const testPerformanceData = async () => {
    if (!credentials.advertiserId || !credentials.accessToken) {
      throw new Error("Advertiser IDÏôÄ Access TokenÏù¥ ÌïÑÏöîÌï©ÎãàÎã§");
    }

    const mockData = {
      code: 0,
      message: "OK",
      data: {
        list: [
          {
            dimensions: {
              campaign_id: "1781234567890123456",
              stat_time_day: "2025-01-06",
            },
            metrics: {
              spend: "125.50",
              impressions: "15420",
              clicks: "342",
              ctr: "2.22",
              cpc: "0.37",
              cpm: "8.14",
              conversions: "28",
              conversion_rate: "8.19",
              cost_per_conversion: "4.48",
              video_watched_2s: "8210",
              video_watched_6s: "5123",
              engaged_view: "3421",
            },
          },
          {
            dimensions: {
              campaign_id: "1781234567890123457",
              stat_time_day: "2025-01-06",
            },
            metrics: {
              spend: "89.25",
              impressions: "12100",
              clicks: "425",
              ctr: "3.51",
              cpc: "0.21",
              cpm: "7.38",
              conversions: "12",
              conversion_rate: "2.82",
              cost_per_conversion: "7.44",
              video_watched_2s: "6543",
              video_watched_6s: "4231",
              engaged_view: "2876",
            },
          },
        ],
        page_info: {
          page: 1,
          page_size: 1000,
          total_number: 2,
          total_page: 1,
        },
      },
      request_id: "202501061234567893",
    };

    return mockData;
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardBody className="space-y-4">
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold">TikTok Ads API ÏÑ§Ï†ï</h2>
            <Chip color="warning" size="sm" variant="flat">
              Beta
            </Chip>
          </div>

          <Accordion defaultExpandedKeys={["guide"]}>
            <AccordionItem
              key="guide"
              aria-label="ÏÑ§Ï†ï Í∞ÄÏù¥Îìú"
              title={
                <div className="flex items-center gap-2">
                  <span>üìã</span>
                  <span className="font-medium">Îπ†Î•∏ ÏãúÏûë Í∞ÄÏù¥Îìú</span>
                </div>
              }
            >
              <div className="space-y-4 pb-4">
                <div className="space-y-2">
                  <h4 className="font-semibold text-sm">
                    1. TikTok Í∞úÎ∞úÏûê Í≥ÑÏ†ï ÏÑ§Ï†ï
                  </h4>
                  <ul className="list-disc list-inside space-y-1 text-sm text-gray-700 ml-2">
                    <li>
                      <a
                        className="text-blue-600 hover:underline"
                        href="https://developers.tiktok.com"
                        rel="noopener noreferrer"
                        target="_blank"
                      >
                        TikTok Developers
                      </a>
                      ÏóêÏÑú Í≥ÑÏ†ï ÏÉùÏÑ±
                    </li>
                    <li>Business API Ïï°ÏÑ∏Ïä§ Ïã†Ï≤≠ (ÏäπÏù∏ÍπåÏßÄ 2-7Ïùº ÏÜåÏöî)</li>
                    <li>Ïï± ÏÉùÏÑ± ÌõÑ App IDÏôÄ App Secret Î∞úÍ∏â</li>
                  </ul>
                </div>

                <div className="space-y-2">
                  <h4 className="font-semibold text-sm">2. OAuth 2.0 Ïù∏Ï¶ù</h4>
                  <ul className="list-disc list-inside space-y-1 text-sm text-gray-700 ml-2">
                    <li>Authorization Code Î∞©Ïãù ÏÇ¨Ïö©</li>
                    <li>ÌïÑÏàò Í∂åÌïú: ads.management, reporting</li>
                    <li>Access Token Ïú†Ìö®Í∏∞Í∞Ñ: 24ÏãúÍ∞Ñ</li>
                    <li>Refresh Token Ïú†Ìö®Í∏∞Í∞Ñ: 365Ïùº</li>
                  </ul>
                </div>

                <Card className="bg-yellow-50 border-yellow-200">
                  <CardBody className="text-sm">
                    <p className="font-semibold text-yellow-800 mb-1">
                      ‚ö†Ô∏è Ï§ëÏöî Ï†úÌïúÏÇ¨Ìï≠
                    </p>
                    <ul className="list-disc list-inside space-y-1 text-yellow-700">
                      <li>ÏõπÌõÖÏùÄ Í¥ëÍ≥† Ïù¥Î≤§Ìä∏Î•º ÏßÄÏõêÌïòÏßÄ ÏïäÏùå</li>
                      <li>Ï∫†ÌéòÏù∏ Î™®ÎãàÌÑ∞ÎßÅÏùÄ Ìè¥ÎßÅ Î∞©Ïãù ÌïÑÏöî</li>
                      <li>API Ìò∏Ï∂ú Ï†úÌïú: 600Ìöå/Î∂Ñ</li>
                    </ul>
                  </CardBody>
                </Card>
              </div>
            </AccordionItem>

            <AccordionItem
              key="troubleshooting"
              aria-label="Ìä∏Îü¨Î∏îÏäàÌåÖ"
              title={
                <div className="flex items-center gap-2">
                  <span>üîß</span>
                  <span className="font-medium">Ìä∏Îü¨Î∏îÏäàÌåÖ Í∞ÄÏù¥Îìú</span>
                </div>
              }
            >
              <div className="space-y-4 pb-4">
                <div className="space-y-2">
                  <h4 className="font-semibold text-sm">
                    ÌùîÌïú Ïò§Î•òÏôÄ Ìï¥Í≤∞Î∞©Î≤ï
                  </h4>

                  <Card className="bg-gray-50">
                    <CardBody className="space-y-2">
                      <p className="font-medium text-sm">
                        1. &quot;40001: Invalid auth_code&quot;
                      </p>
                      <p className="text-sm text-gray-600">
                        Authorization CodeÎäî Ìïú Î≤àÎßå ÏÇ¨Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§. ÏÉàÎ°úÏö¥
                        ÏΩîÎìúÎ•º Î∞õÏïÑÏÑú Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî.
                      </p>
                    </CardBody>
                  </Card>

                  <Card className="bg-gray-50">
                    <CardBody className="space-y-2">
                      <p className="font-medium text-sm">
                        2. &quot;40002: Invalid access_token&quot;
                      </p>
                      <p className="text-sm text-gray-600">
                        ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêòÏóàÍ±∞ÎÇò ÏûòÎ™ªÎêòÏóàÏäµÎãàÎã§. 24ÏãúÍ∞ÑÎßàÎã§ ÌÜ†ÌÅ∞ÏùÑ
                        Í∞±Ïã†Ìï¥Ïïº Ìï©ÎãàÎã§.
                      </p>
                    </CardBody>
                  </Card>

                  <Card className="bg-gray-50">
                    <CardBody className="space-y-2">
                      <p className="font-medium text-sm">
                        3. &quot;40104: App permissions insufficient&quot;
                      </p>
                      <p className="text-sm text-gray-600">
                        Ïï±Ïóê ÌïÑÏöîÌïú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§. Business API ÏäπÏù∏ ÏÉÅÌÉúÎ•º
                        ÌôïÏù∏ÌïòÏÑ∏Ïöî.
                      </p>
                    </CardBody>
                  </Card>

                  <Card className="bg-gray-50">
                    <CardBody className="space-y-2">
                      <p className="font-medium text-sm">
                        4. 429 Rate Limit Error
                      </p>
                      <p className="text-sm text-gray-600">
                        API Ìò∏Ï∂ú Ï†úÌïúÏùÑ Ï¥àÍ≥ºÌñàÏäµÎãàÎã§. ÏßÄÏàò Î∞±Ïò§ÌîÑÎ°ú
                        Ïû¨ÏãúÎèÑÌïòÏÑ∏Ïöî.
                      </p>
                    </CardBody>
                  </Card>
                </div>

                <Divider />

                <div className="space-y-2">
                  <h4 className="font-semibold text-sm">ÎîîÎ≤ÑÍπÖ ÌåÅ</h4>
                  <ul className="list-disc list-inside space-y-1 text-sm text-gray-700">
                    <li>
                      Î™®Îì† API ÏùëÎãµÏùò <Code size="sm">request_id</Code>Î•º
                      Î°úÍπÖÌïòÏó¨ ÏßÄÏõê ÏöîÏ≤≠ Ïãú ÏÇ¨Ïö©
                    </li>
                    <li>Sandbox ÌôòÍ≤ΩÏóêÏÑú Î®ºÏ†Ä ÌÖåÏä§Ìä∏ ÏßÑÌñâ</li>
                    <li>Business Center Í≥ÑÏ†ïÏúºÎ°ú Ïó¨Îü¨ Í¥ëÍ≥†Ï£º Í¥ÄÎ¶¨ Í∞ÄÎä•</li>
                  </ul>
                </div>
              </div>
            </AccordionItem>

            <AccordionItem
              key="api-reference"
              aria-label="API Î†àÌçºÎü∞Ïä§"
              title={
                <div className="flex items-center gap-2">
                  <span>üìö</span>
                  <span className="font-medium">Ï£ºÏöî API ÏóîÎìúÌè¨Ïù∏Ìä∏</span>
                </div>
              }
            >
              <div className="space-y-4 pb-4">
                <div className="space-y-2">
                  <h4 className="font-semibold text-sm">Ïù∏Ï¶ù Í¥ÄÎ†®</h4>
                  <Code className="block p-2" size="sm">
                    POST
                    https://business-api.tiktok.com/open_api/v1.3/oauth2/access_token/
                  </Code>
                </div>

                <div className="space-y-2">
                  <h4 className="font-semibold text-sm">Ï∫†ÌéòÏù∏ Í¥ÄÎ¶¨</h4>
                  <div className="space-y-1">
                    <Code className="block p-2" size="sm">
                      POST /open_api/v1.3/campaign/create/
                    </Code>
                    <Code className="block p-2" size="sm">
                      POST /open_api/v1.3/campaign/update/status/
                    </Code>
                    <Code className="block p-2" size="sm">
                      GET /open_api/v1.3/campaign/get/
                    </Code>
                  </div>
                </div>

                <div className="space-y-2">
                  <h4 className="font-semibold text-sm">Î≥¥Í≥†ÏÑú Ï°∞Ìöå</h4>
                  <div className="space-y-1">
                    <Code className="block p-2" size="sm">
                      GET /open_api/v1.3/report/integrated/get/
                    </Code>
                    <Code className="block p-2" size="sm">
                      POST /open_api/v1.3/report/task/create/
                    </Code>
                  </div>
                </div>

                <div className="mt-4">
                  <a
                    className="text-blue-600 hover:underline text-sm"
                    href="https://business-api.tiktok.com/portal/docs"
                    rel="noopener noreferrer"
                    target="_blank"
                  >
                    Ï†ÑÏ≤¥ API Î¨∏ÏÑú Î≥¥Í∏∞ ‚Üí
                  </a>
                </div>
              </div>
            </AccordionItem>
          </Accordion>

          <Input
            label="App ID"
            placeholder="TikTok App ID"
            value={credentials.appId}
            onChange={(e) =>
              setCredentials({ ...credentials, appId: e.target.value })
            }
          />

          <Input
            label="App Secret"
            placeholder="TikTok App Secret"
            type="password"
            value={credentials.appSecret}
            onChange={(e) =>
              setCredentials({ ...credentials, appSecret: e.target.value })
            }
          />

          <Divider />

          <h3 className="font-semibold">OAuth2 Ïù∏Ï¶ù</h3>

          <Button
            color="primary"
            isDisabled={!credentials.appId}
            onPress={handleGenerateAuthUrl}
          >
            TikTok OAuth ÏãúÏûë
          </Button>

          <Input
            label="Authorization Code"
            placeholder="OAuth Ïù∏Ï¶ù ÌõÑ ÏûêÎèô ÏûÖÎ†•Îê©ÎãàÎã§"
            value={authCode}
            onChange={(e) => setAuthCode(e.target.value)}
          />

          <Input
            label="Advertiser ID"
            placeholder="Í¥ëÍ≥†Ï£º ID"
            value={credentials.advertiserId}
            onChange={(e) =>
              setCredentials({ ...credentials, advertiserId: e.target.value })
            }
          />
        </CardBody>
      </Card>

      <PlatformTestCard
        testItems={testItems}
        title="TikTok Ads API Ïó∞Îèô ÌÖåÏä§Ìä∏"
        onRunTest={runTest}
      />

      <Card>
        <CardBody className="space-y-3">
          <h3 className="font-semibold">API ÏÜçÎèÑ Ï†úÌïú</h3>
          <div className="space-y-2 text-sm">
            <div className="flex items-center justify-between">
              <span>ÏùºÎ∞ò ÏóîÎìúÌè¨Ïù∏Ìä∏</span>
              <Badge color="primary" variant="flat">
                600/Î∂Ñ
              </Badge>
            </div>
            <div className="flex items-center justify-between">
              <span>ÎßûÏ∂§ Ïò§ÎîîÏñ∏Ïä§</span>
              <Badge color="warning" variant="flat">
                24Ìöå/Ïùº
              </Badge>
            </div>
          </div>
        </CardBody>
      </Card>

      {(error || apiResponse) && (
        <Card>
          <CardBody>
            {error && (
              <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
                <p className="font-semibold">Ïò§Î•ò:</p>
                <p>{error}</p>
              </div>
            )}

            {apiResponse && (
              <div className="space-y-2">
                <p className="font-semibold">ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:</p>
                <Code className="w-full p-4 overflow-auto max-h-96">
                  <pre>{JSON.stringify(apiResponse, null, 2)}</pre>
                </Code>
              </div>
            )}
          </CardBody>
        </Card>
      )}
    </div>
  );
}
